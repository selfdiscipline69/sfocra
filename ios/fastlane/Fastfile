default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    # Ensure build directory exists (Windows compatible)
    if FastlaneCore::Helper.windows?
      sh("mkdir ..\\build 2>nul || exit 0")
    else
      sh("mkdir -p ../build")
    end
    
    # Increment build number - Skip on Windows as this requires xcodebuild
    unless FastlaneCore::Helper.windows?
      increment_build_number(xcodeproj: "Sfocra.xcodeproj")
    end
    
    # Update CocoaPods dependencies - Skip on Windows as this requires macOS
    unless FastlaneCore::Helper.windows?
      cocoapods
    end
    
    # These actions will only run on CI (GitHub Actions) or macOS
    unless FastlaneCore::Helper.windows?
      # Update code signing settings - use automatic signing
      update_code_signing_settings(
        use_automatic_signing: true,
        team_id: ENV["TEAM_ID"] || CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
        bundle_identifier: ENV["BUNDLE_IDENTIFIER"] || CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
        build_configurations: ["Release"],
        path: "Sfocra.xcodeproj"
      )
      
      # Build the app with automatic signing
      build_app(
        workspace: "Sfocra.xcworkspace",
        scheme: "Sfocra",
        output_directory: "build",
        output_name: "Sfocra.ipa",
        export_method: "app-store",
        clean: true,
        export_options: {
          method: "app-store",
          teamID: ENV["TEAM_ID"] || CredentialsManager::AppfileConfig.try_fetch_value(:team_id)
        }
      )
      
      # Upload to TestFlight
      upload_to_testflight(
        skip_waiting_for_build_processing: true,
        apple_id: CredentialsManager::AppfileConfig.try_fetch_value(:apple_id),
        api_key_path: ENV["API_KEY_PATH"],
        api_key: {
          key_id: ENV["API_KEY_ID"],
          issuer_id: ENV["ISSUER_ID"],
          key_filepath: ENV["API_KEY_PATH"]
        }
      )
    else
      UI.important("Running on Windows - skipping iOS build and upload steps. These will run on CI.")
    end
  end
  
  desc "Prepare development environment"
  lane :setup do
    # Works on any platform
    UI.success("Fastlane environment is ready!")
    
    # Only on macOS
    unless FastlaneCore::Helper.windows?
      # Install certificates, profiles, etc.
      UI.success("macOS-specific setup complete")
    end
  end
end 