name: Upload iOS App to TestFlight

on:
  push:
    branches:
      - main   
  workflow_dispatch:  # Allow manual trigger from GitHub UI

jobs:
  build-and-upload:
    runs-on: macos-latest
    env:
      BUNDLE_GEMFILE: ${{ github.workspace }}/ios/Gemfile
      # Disable Hermes to work around podspec issues
      USE_HERMES: 0
      # Add env variables for code signing
      TEAM_ID: ${{ vars.APPLE_TEAM_ID}}
      BUNDLE_IDENTIFIER: ${{ vars.BUNDLE_IDENTIFIER}}
      # App Store Connect API Key details
      APPSTORE_KEY_ID: ${{ vars.APPSTORE_KEY_ID }}
      APPSTORE_ISSUER_ID: ${{ vars.APPSTORE_ISSUER_ID }}
      FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for proper version numbering

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'  # Using Node 18 for better compatibility with Expo
          cache: 'npm'

      - name: Install JS dependencies
        run: |
          npm install
          # Update Expo dependencies rather than just checking them
          npx expo install expo-router@~4.0.21
          # Continue even if expo check reports issues
          npx expo install --check || true

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Setup Ruby and bundle
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'  # Updated from 3.0 to 3.2 for Bundler 2.6.9 compatibility
          bundler-cache: false  # Disable automatic bundler cache to handle platform differences
          working-directory: 'ios'

      - name: Install dependencies with Bundler
        run: |
          cd ios
          # Add the current platform to the lockfile
          bundle lock --add-platform arm64-darwin-23
          bundle lock --add-platform arm64-darwin
          bundle lock --add-platform x86_64-darwin
          # Install gems from Gemfile
          bundle install
          
      - name: Modify Podfile to handle compatibility issues
        run: |
          # Create a temporary file with our changes
          cat > ios/podfile_temp.rb << 'EOF'
          # Add at the top of the Podfile
          require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
          require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

          require 'json'
          podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

          ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
          ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

          platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
          install! 'cocoapods',
            :deterministic_uuids => false

          prepare_react_native_project!

          target 'Sfocra' do
            use_expo_modules!

            if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
              config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
            else
              config_command = [
                'node',
                '--no-warnings',
                '--eval',
                'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
                'react-native-config',
                '--json',
                '--platform',
                'ios'
              ]
            end

            config = use_native_modules!(config_command)

            use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
            use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

            use_react_native!(
              :path => config[:reactNativePath],
              # Force hermes to be disabled for this build
              :hermes_enabled => false,
              # An absolute path to your application root.
              :app_path => "#{Pod::Config.instance.installation_root}/..",
              :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
            )

            post_install do |installer|
              react_native_post_install(
                installer,
                config[:reactNativePath],
                :mac_catalyst_enabled => false,
                :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
              )

              # This is necessary for Xcode 14, because it signs resource bundles by default
              # when building for devices.
              installer.target_installation_results.pod_target_installation_results
                .each do |pod_name, target_installation_result|
                target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
                  resource_bundle_target.build_configurations.each do |config|
                    config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
                  end
                end
              end
            end
          end
          EOF
          
          # Backup the original Podfile
          cp ios/Podfile ios/Podfile.original
          # Replace the Podfile with our modified version
          cp ios/podfile_temp.rb ios/Podfile
          
          # Patch RNScreens Podspec
          cp node_modules/react-native-screens/RNScreens.podspec node_modules/react-native-screens/RNScreens.podspec.bak
          sed -i '' '/project_header_files/d' node_modules/react-native-screens/RNScreens.podspec
          echo "Patched RNScreens.podspec to remove unsupported property"
          
      - name: Install CocoaPods
        run: |
          cd ios
          bundle exec pod install

      - name: Configure Apple Credentials
        env:
          APPSTORE_API_KEY_BASE64: ${{ secrets.APPLE_PRIVATE_KEY }}
        run: |
          mkdir -p ~/private_keys
          echo -n "$APPSTORE_API_KEY_BASE64" | base64 --decode > ~/private_keys/AuthKey.p8
          echo "API_KEY_PATH=~/private_keys/AuthKey.p8" >> $GITHUB_ENV
          
          # Create App Store Connect API auth configuration JSON
          # Use absolute path with $HOME instead of tilde
          mkdir -p $HOME/.fastlane
          cat > $HOME/.fastlane/app-store-connect-auth.json << EOL
          {
            "key_id": "$APPSTORE_KEY_ID",
            "issuer_id": "$APPSTORE_ISSUER_ID",
            "key": "$(cat ~/private_keys/AuthKey.p8)"
          }
          EOL
          
          # Store the full path in an environment variable for later use
          echo "APPSTORE_AUTH_FILE=$HOME/.fastlane/app-store-connect-auth.json" >> $GITHUB_ENV
          
          # Verify that the key file exists and has content
          ls -la ~/private_keys/
          if [ ! -s ~/private_keys/AuthKey.p8 ]; then
            echo "ERROR: API key file is empty or doesn't exist"
            exit 1
          fi
          
          if [ ! -s $HOME/.fastlane/app-store-connect-auth.json ]; then
            echo "ERROR: App Store Connect API auth file is empty or doesn't exist"
            exit 1
          fi
          
          # Create temporary keychain for the build
          KEYCHAIN_NAME=build_keychain
          KEYCHAIN_PASSWORD=build_keychain_password
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security default-keychain -s "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN_NAME"

      - name: Build and Upload to TestFlight
        run: |
          cd ios
          # Use the environment variable with the full path
          bundle exec fastlane beta api_key_path:$APPSTORE_AUTH_FILE use_api_key:true
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: ios/build/*.ipa
          retention-days: 5
